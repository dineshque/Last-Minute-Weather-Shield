import streamlit as st
import requests
import json
from datetime import datetime, timedelta
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pyttsx3
import threading
from typing import Dict, List, Tuple

# Configuration
WEATHER_API_KEY = "your_openweathermap_api_key_here"  # Replace with your actual API key
BASE_URL = "http://api.openweathermap.org/data/2.5"

# Language configurations
LANGUAGES = {
    'english': {'name': 'English', 'code': 'en'},
    'hindi': {'name': 'рд╣рд┐рдВрджреА', 'code': 'hi'},
    'punjabi': {'name': 'рикрй░риЬри╛римрйА', 'code': 'pa'},
    'gujarati': {'name': 'ркЧрлБркЬрк░рк╛ркдрлА', 'code': 'gu'},
    'marathi': {'name': 'рдорд░рд╛рдареА', 'code': 'mr'},
    'tamil': {'name': 'родрооро┐ро┤рпН', 'code': 'ta'},
    'telugu': {'name': 'р░др▒Жр░▓р▒Бр░Чр▒Б', 'code': 'te'},
    'bengali': {'name': 'ржмрж╛ржВрж▓рж╛', 'code': 'bn'},
    'kannada': {'name': 'р▓Хр▓ир│Нр▓ир▓б', 'code': 'kn'}
}

# UI Text translations
UI_TEXT = {
    'title': {
        'english': 'ЁЯМ╛ Last-Minute Weather Shield - Crop-Saving Alerts',
        'hindi': 'ЁЯМ╛ рдЕрдВрддрд┐рдо рд╕рдордп рдореМрд╕рдо рд╕реБрд░рдХреНрд╖рд╛ - рдлрд╕рд▓ рдмрдЪрд╛рдиреЗ рд╡рд╛рд▓реЗ рдЕрд▓рд░реНрдЯ',
        'punjabi': 'ЁЯМ╛ риЖриЦри░рйА ри╕риорйЗриВ риорйМри╕рио ри╕рйБри░рй▒риЦри┐риЖ - рилри╕ри▓ римриЪри╛риЙриг ри╡ри╛ри▓рйЗ риЕри▓ри░риЯ',
        'gujarati': 'ЁЯМ╛ ркЫрлЗрк▓рлНрк▓рлА ркШркбрлАркирлА рк╣рк╡рк╛ркорк╛рки рк╕рлБрк░ркХрлНрк╖рк╛ - рккрк╛ркХ ркмркЪрк╛рк╡рк╡рк╛ркирк╛ ркЕрк▓рк░рлНркЯ',
        'marathi': 'ЁЯМ╛ рд╢реЗрд╡рдЯрдЪреНрдпрд╛ рдХреНрд╖рдгреА рд╣рд╡рд╛рдорд╛рди рд╕рдВрд░рдХреНрд╖рдг - рдкреАрдХ рд╡рд╛рдЪрд╡рдгрд╛рд░реЗ рдЕрд▓рд░реНрдЯ',
        'tamil': 'ЁЯМ╛ роХроЯрпИроЪро┐ роиро┐рооро┐роЯ ро╡ро╛ройро┐ро▓рпИ рокро╛родрпБроХро╛рокрпНрокрпБ - рокропро┐ро░рпН роХро╛роХрпНроХрпБроорпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН',
        'telugu': 'ЁЯМ╛ р░Ър░┐р░╡р░░р░┐ р░ир░┐р░ор░┐р░╖р░В р░╡р░╛р░др░╛р░╡р░░р░г р░░р░Хр▒Нр░╖р░г - р░кр░Вр░Я р░░р░Хр▒Нр░╖р░г р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б',
        'bengali': 'ЁЯМ╛ рж╢рзЗрж╖ ржорзБрж╣рзВрж░рзНрждрзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рзБрж░ржХрзНрж╖рж╛ - ржлрж╕рж▓ рж░ржХрзНрж╖рж╛ржХрж╛рж░рзА рж╕рждрж░рзНржХрждрж╛',
        'kannada': 'ЁЯМ╛ р▓Хр│Кр▓ир│Жр▓п р▓ир▓┐р▓ор▓┐р▓╖р▓ж р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓░р▓Хр│Нр▓╖р▓гр│Ж - р▓мр│Жр▓│р│Ж р▓░р▓Хр│Нр▓╖р▓гр▓╛ р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Жр▓Чр▓│р│Б'
    },
    'subtitle': {
        'english': '*Weather alerts and action suggestions for crop protection*',
        'hindi': '*рдлрд╕рд▓ рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рдореМрд╕рдо рдЕрд▓рд░реНрдЯ рдФрд░ рдХрд╛рд░реНрдп рд╕реБрдЭрд╛рд╡*',
        'punjabi': '*рилри╕ри▓ ри╕рйБри░рй▒риЦри┐риЖ ри▓риИ риорйМри╕рио риЕри▓ри░риЯ риЕридрйЗ риХри╛ри░ри╡ри╛риИ ри╕рйБриЭри╛риЕ*',
        'gujarati': '*рккрк╛ркХ рк╕рлБрк░ркХрлНрк╖рк╛ ркорк╛ркЯрлЗ рк╣рк╡рк╛ркорк╛рки ркЕрк▓рк░рлНркЯ ркЕркирлЗ ркХрк╛рк░рлНркп рк╕рлВркЪркирлЛ*',
        'marathi': '*рдкреАрдХ рд╕рдВрд░рдХреНрд╖рдгрд╛рд╕рд╛рдареА рд╣рд╡рд╛рдорд╛рди рдЕрд▓рд░реНрдЯ рдЖрдгрд┐ рдХреГрддреА рд╕реВрдЪрдирд╛*',
        'tamil': '*рокропро┐ро░рпН рокро╛родрпБроХро╛рокрпНрокро┐ро▒рпНроХро╛рой ро╡ро╛ройро┐ро▓рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН рооро▒рпНро▒рпБроорпН роЪрпЖропро▓рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН*',
        'telugu': '*р░кр░Вр░Я р░░р░Хр▒Нр░╖р░г р░Хр▒Лр░╕р░В р░╡р░╛р░др░╛р░╡р░░р░г р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б р░ор░░р░┐р░пр▒Б р░Ър░░р▒Нр░п р░╕р▒Вр░Ър░ир░▓р▒Б*',
        'bengali': '*ржлрж╕рж▓ рж╕рзБрж░ржХрзНрж╖рж╛рж░ ржЬржирзНржп ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рждрж░рзНржХрждрж╛ ржПржмржВ ржХрж░рзНржо ржкрж░рж╛ржорж░рзНрж╢*',
        'kannada': '*р▓мр│Жр▓│р│Ж р▓░р▓Хр│Нр▓╖р▓гр│Жр▓Чр▓╛р▓Чр▓┐ р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Жр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Хр│Нр▓░р▓┐р▓пр▓╛ р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б*'
    },
    'settings': {
        'english': 'Settings',
        'hindi': 'рд╕реЗрдЯрд┐рдВрдЧреНрд╕',
        'punjabi': 'ри╕рйИриЯри┐рй░риЧриЬри╝',
        'gujarati': 'рк╕рлЗркЯрк┐ркВркЧрлНрк╕',
        'marathi': 'рд╕реЗрдЯрд┐рдВрдЧреНрд╕',
        'tamil': 'роЕроорпИрокрпНрокрпБроХро│рпН',
        'telugu': 'р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒Бр░▓р▒Б',
        'bengali': 'рж╕рзЗржЯрж┐ржВрж╕',
        'kannada': 'р▓╕р│Жр▓Яр│Нр▓Яр▓┐р▓Вр▓Чр│НтАМр▓Чр▓│р│Б'
    },
    'enter_city': {
        'english': 'Enter your city:',
        'hindi': 'рдЕрдкрдирд╛ рд╢рд╣рд░ рджрд░реНрдЬ рдХрд░реЗрдВ:',
        'punjabi': 'риЖрикригри╛ ри╕ри╝ри╣ри┐ри░ рижри╛риЦри▓ риХри░рйЛ:',
        'gujarati': 'ркдркорк╛рк░рлБркВ рк╢рк╣рлЗрк░ ркжрк╛ркЦрк▓ ркХрк░рлЛ:',
        'marathi': 'рддреБрдордЪреЗ рд╢рд╣рд░ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛:',
        'tamil': 'роЙроЩрпНроХро│рпН роироХро░родрпНродрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН:',
        'telugu': 'р░ор▒А р░ир░Чр░░р░╛р░ир▒Нр░ир░┐ р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐:',
        'bengali': 'ржЖржкржирж╛рж░ рж╢рж╣рж░ рж▓рж┐ржЦрзБржи:',
        'kannada': 'р▓ир▓┐р▓ор│Нр▓о р▓ир▓Чр▓░р▓╡р▓ир│Нр▓ир│Б р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐:'
    },
    'language_select': {
        'english': 'Language / рднрд╛рд╖рд╛ / ринри╛ри╕ри╝ри╛',
        'hindi': 'рднрд╛рд╖рд╛ / Language / ринри╛ри╕ри╝ри╛',
        'punjabi': 'ринри╛ри╕ри╝ри╛ / Language / рднрд╛рд╖рд╛',
        'gujarati': 'ркнрк╛рк╖рк╛ / Language / рднрд╛рд╖рд╛',
        'marathi': 'рднрд╛рд╖рд╛ / Language / ринри╛ри╕ри╝ри╛',
        'tamil': 'роорпКро┤ро┐ / Language / рднрд╛рд╖рд╛',
        'telugu': 'р░нр░╛р░╖ / Language / рднрд╛рд╖рд╛',
        'bengali': 'ржнрж╛рж╖рж╛ / Language / рднрд╛рд╖рд╛',
        'kannada': 'р▓нр▓╛р▓╖р│Ж / Language / рднрд╛рд╖рд╛'
    },
    'voice_alerts': {
        'english': 'Enable Voice Alerts',
        'hindi': 'рдЖрд╡рд╛рдЬрд╝ рдЕрд▓рд░реНрдЯ рд╕рдХреНрд╖рдо рдХрд░реЗрдВ',
        'punjabi': 'риЖри╡ри╛риЬри╝ риЕри▓ри░риЯ ри╕риори░рй▒рие риХри░рйЛ',
        'gujarati': 'ркЕрк╡рк╛ркЬ ркЕрк▓рк░рлНркЯ рк╕ркХрлНрк╖рко ркХрк░рлЛ',
        'marathi': 'рдЖрд╡рд╛рдЬ рдЕрд▓рд░реНрдЯ рд╕рдХреНрд╖рдо рдХрд░рд╛',
        'tamil': 'роХрпБро░ро▓рпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИ роЗропроХрпНроХро╡рпБроорпН',
        'telugu': 'р░╡р░╛р░пр░┐р░╕р▒Н р░Ер░▓р░░р▒Нр░Яр▒НтАМр░▓р░ир▒Б р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐',
        'bengali': 'ржнржпрж╝рзЗрж╕ ржЕрзНржпрж╛рж▓рж╛рж░рзНржЯ рж╕ржХрзНрж╖ржо ржХрж░рзБржи',
        'kannada': 'р▓зр│Нр▓╡р▓ир▓┐ р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓╕р▓Хр│Нр▓░р▓┐р▓пр▓Чр│Кр▓│р▓┐р▓╕р▓┐'
    },
    'get_forecast': {
        'english': 'ЁЯМдя╕П Get Weather Forecast',
        'hindi': 'ЁЯМдя╕П рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
        'punjabi': 'ЁЯМдя╕П риорйМри╕рио рикрйВри░ри╡ риЕриирйБриори╛рии рикрйНри░ри╛рикрид риХри░рйЛ',
        'gujarati': 'ЁЯМдя╕П рк╣рк╡рк╛ркорк╛рки ркЖркЧрк╛рк╣рлА ркорлЗрк│рк╡рлЛ',
        'marathi': 'ЁЯМдя╕П рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ рдорд┐рд│рд╡рд╛',
        'tamil': 'ЁЯМдя╕П ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ рокрпЖро▒рпБроЩрпНроХро│рпН',
        'telugu': 'ЁЯМдя╕П р░╡р░╛р░др░╛р░╡р░░р░г р░╕р▒Вр░Ър░и р░кр▒Кр░Вр░жр░Вр░бр░┐',
        'bengali': 'ЁЯМдя╕П ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржкрж╛ржи',
        'kannada': 'ЁЯМдя╕П р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор│Бр▓ир│Нр▓ир│Лр▓Я р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐'
    },
    'current_weather': {
        'english': 'ЁЯМбя╕П Current Weather',
        'hindi': 'ЁЯМбя╕П рд╡рд░реНрддрдорд╛рди рдореМрд╕рдо',
        'punjabi': 'ЁЯМбя╕П риорйМриЬрйВрижри╛ риорйМри╕рио',
        'gujarati': 'ЁЯМбя╕П рк╡рк░рлНркдркорк╛рки рк╣рк╡рк╛ркорк╛рки',
        'marathi': 'ЁЯМбя╕П рд╕рдзреНрдпрд╛рдЪреЗ рд╣рд╡рд╛рдорд╛рди',
        'tamil': 'ЁЯМбя╕П родро▒рпНрокрпЛродрпИроп ро╡ро╛ройро┐ро▓рпИ',
        'telugu': 'ЁЯМбя╕П р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░╡р░╛р░др░╛р░╡р░░р░гр░В',
        'bengali': 'ЁЯМбя╕П ржмрж░рзНрждржорж╛ржи ржЖржмрж╣рж╛ржУржпрж╝рж╛',
        'kannada': 'ЁЯМбя╕П р▓кр│Нр▓░р▓╕р│Нр▓др│Бр▓д р▓╣р▓╡р▓╛р▓ор▓╛р▓и'
    },
    'crop_risk_analysis': {
        'english': 'тЪая╕П Crop Risk Analysis',
        'hindi': 'тЪая╕П рдлрд╕рд▓ рдЬреЛрдЦрд┐рдо рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
        'punjabi': 'тЪая╕П рилри╕ри▓ риЬрйЛриЦрио ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг',
        'gujarati': 'тЪая╕П рккрк╛ркХ ркЬрлЛркЦрко рк╡рк┐рк╢рлНрк▓рлЗрк╖ркг',
        'marathi': 'тЪая╕П рдкреАрдХ рдЬреЛрдЦреАрдо рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
        'tamil': 'тЪая╕П рокропро┐ро░рпН роЖрокродрпНродрпБ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ',
        'telugu': 'тЪая╕П р░кр░Вр░Я р░кр▒Нр░░р░ор░╛р░ж р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г',
        'bengali': 'тЪая╕П ржлрж╕рж▓ ржЭрзБржБржХрж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг',
        'kannada': 'тЪая╕П р▓мр│Жр▓│р│Ж р▓Ер▓кр▓╛р▓п р▓╡р▓┐р▓╢р│Нр▓▓р│Зр▓╖р▓гр│Ж'
    },
    'no_risks': {
        'english': 'тЬЕ No immediate crop risks detected!',
        'hindi': 'тЬЕ рдХреЛрдИ рддрддреНрдХрд╛рд▓ рдлрд╕рд▓ рдЬреЛрдЦрд┐рдо рдирд╣реАрдВ рдорд┐рд▓рд╛!',
        'punjabi': 'тЬЕ риХрйЛриИ ридрйБри░рй░рид рилри╕ри▓ риЬрйЛриЦрио риири╣рйАриВ риори┐ри▓ри┐риЖ!',
        'gujarati': 'тЬЕ ркХрлЛркИ ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХ рккрк╛ркХ ркЬрлЛркЦрко ркорк│рлНркпрлБркВ ркиркерлА!',
        'marathi': 'тЬЕ рдХреЛрдгрддрд╛рд╣реА рддрд╛рддреНрдХрд╛рд│ рдкреАрдХ рдзреЛрдХрд╛ рдЖрдврд│рд▓рд╛ рдирд╛рд╣реА!',
        'tamil': 'тЬЕ роЙроЯройроЯро┐ рокропро┐ро░рпН роЖрокродрпНродрпБроХро│рпН роОродрпБро╡рпБроорпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ!',
        'telugu': 'тЬЕ р░др░Хр▒Нр░╖р░г р░кр░Вр░Я р░кр▒Нр░░р░ор░╛р░жр░╛р░▓р▒Б р░Пр░╡р▒А р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░▓р▒Зр░жр▒Б!',
        'bengali': 'тЬЕ ржХрзЛржирзЛ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржлрж╕рж▓ ржЭрзБржБржХрж┐ рж╢ржирж╛ржХрзНржд рж╣ржпрж╝ржирж┐!',
        'kannada': 'тЬЕ р▓пр▓╛р▓╡р│Бр▓жр│З р▓др▓Хр│Нр▓╖р▓гр▓ж р▓мр│Жр▓│р│Ж р▓Ер▓кр▓╛р▓пр▓Чр▓│р│Б р▓кр▓др│Нр▓др│Жр▓пр▓╛р▓Чр▓┐р▓▓р│Нр▓▓!'
    },
    'forecast_chart': {
        'english': 'ЁЯУК 3-Day Weather Forecast',
        'hindi': 'ЁЯУК 3-рджрд┐рди рдХрд╛ рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди',
        'punjabi': 'ЁЯУК 3-рижри┐рии рижри╛ риорйМри╕рио рикрйВри░ри╡ риЕриирйБриори╛рии',
        'gujarati': 'ЁЯУК 3-ркжрк┐рк╡рк╕ркирлА рк╣рк╡рк╛ркорк╛рки ркЖркЧрк╛рк╣рлА',
        'marathi': 'ЁЯУК 3-рджрд┐рд╡рд╕рд╛рдВрдЪрд╛ рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ',
        'tamil': 'ЁЯУК 3-роиро╛ро│рпН ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ',
        'telugu': 'ЁЯУК 3-р░░р▒Лр░Ьр▒Бр░▓ р░╡р░╛р░др░╛р░╡р░░р░г р░╕р▒Вр░Ър░и',
        'bengali': 'ЁЯУК 3-ржжрж┐ржирзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕',
        'kannada': 'ЁЯУК 3-р▓жр▓┐р▓ир▓Чр▓│ р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор│Бр▓ир│Нр▓ир│Лр▓Я'
    },
    'detailed_forecast': {
        'english': 'ЁЯУЕ Detailed Forecast',
        'hindi': 'ЁЯУЕ рд╡рд┐рд╕реНрддреГрдд рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди',
        'punjabi': 'ЁЯУЕ ри╡ри┐ри╕ридрйНри░ри┐рид рикрйВри░ри╡ риЕриирйБриори╛рии',
        'gujarati': 'ЁЯУЕ рк╡рк┐ркЧркдрк╡рк╛рк░ ркЖркЧрк╛рк╣рлА',
        'marathi': 'ЁЯУЕ рддрдкрд╢реАрд▓рд╡рд╛рд░ рдЕрдВрджрд╛рдЬ',
        'tamil': 'ЁЯУЕ ро╡ро┐ро░ро┐ро╡ро╛рой роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ',
        'telugu': 'ЁЯУЕ р░╡р░┐р░╡р░░р░гр░╛р░др▒Нр░ор░Х р░╕р▒Вр░Ър░и',
        'bengali': 'ЁЯУЕ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржкрзВрж░рзНржмрж╛ржнрж╛рж╕',
        'kannada': 'ЁЯУЕ р▓╡р▓┐р▓╡р▓░р▓╡р▓╛р▓ж р▓ор│Бр▓ир│Нр▓ир│Лр▓Я'
    },
    'error_city': {
        'english': 'Please enter a city name',
        'hindi': 'рдХреГрдкрдпрд╛ рд╢рд╣рд░ рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ',
        'punjabi': 'риХри┐ри░рикри╛ риХри░риХрйЗ ри╕ри╝ри╣ри┐ри░ рижри╛ риири╛рио рижри╛риЦри▓ риХри░рйЛ',
        'gujarati': 'ркХрлГрккрк╛ ркХрк░рлАркирлЗ рк╢рк╣рлЗрк░ркирлБркВ ркирк╛рко ркжрк╛ркЦрк▓ ркХрк░рлЛ',
        'marathi': 'рдХреГрдкрдпрд╛ рд╢рд╣рд░рд╛рдЪреЗ рдирд╛рд╡ рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛',
        'tamil': 'родропро╡рпБроЪрпЖропрпНродрпБ роироХро░родрпНродро┐ройрпН рокрпЖропро░рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН',
        'telugu': 'р░жр░пр░Ър▒Зр░╕р░┐ р░ир░Чр░░ р░кр▒Зр░░р▒Бр░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐',
        'bengali': 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╢рж╣рж░рзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи',
        'kannada': 'р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓ир▓Чр▓░р▓ж р▓╣р│Жр▓╕р▓░р▓ир│Нр▓ир│Б р▓ир▓ор│Вр▓жр▓┐р▓╕р▓┐'
    },
    'error_api': {
        'english': 'Please add your OpenWeatherMap API key in the code',
        'hindi': 'рдХреГрдкрдпрд╛ рдХреЛрдб рдореЗрдВ рдЕрдкрдиреА OpenWeatherMap API key рдЬреЛрдбрд╝реЗрдВ',
        'punjabi': 'риХри┐ри░рикри╛ риХри░риХрйЗ риХрйЛриб ри╡ри┐рй▒риЪ риЖрикригрйА OpenWeatherMap API key ри╕ри╝ри╛риори▓ риХри░рйЛ',
        'gujarati': 'ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркХрлЛркбркорк╛ркВ ркдркорк╛рк░рлА OpenWeatherMap API key ркЙркорлЗрк░рлЛ',
        'marathi': 'рдХреГрдкрдпрд╛ рдХреЛрдбрдордзреНрдпреЗ рддреБрдордЪреА OpenWeatherMap API key рдЬреЛрдбрд╛',
        'tamil': 'родропро╡рпБроЪрпЖропрпНродрпБ роХрпБро▒ро┐ропрпАроЯрпНроЯро┐ро▓рпН роЙроЩрпНроХро│рпН OpenWeatherMap API key роР роЪрпЗро░рпНроХрпНроХро╡рпБроорпН',
        'telugu': 'р░жр░пр░Ър▒Зр░╕р░┐ р░Хр▒Лр░бр▒НтАМр░▓р▒Л р░ор▒А OpenWeatherMap API key р░ир░┐ р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐',
        'bengali': 'ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрзЛржбрзЗ ржЖржкржирж╛рж░ OpenWeatherMap API key ржпрзЛржЧ ржХрж░рзБржи',
        'kannada': 'р▓жр▓пр▓╡р▓┐р▓Яр│Нр▓Яр│Б р▓Хр│Лр▓бр│НтАМр▓ир▓▓р│Нр▓▓р▓┐ р▓ир▓┐р▓ор│Нр▓о OpenWeatherMap API key р▓Ер▓ир│Нр▓ир│Б р▓╕р│Зр▓░р▓┐р▓╕р▓┐'
    },
    'fetching_data': {
        'english': 'Fetching weather data...',
        'hindi': 'рдореМрд╕рдо рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░ рд░рд╣реЗ рд╣реИрдВ...',
        'punjabi': 'риорйМри╕рио рибрйЗриЯри╛ рикрйНри░ри╛рикрид риХри░ ри░ри╣рйЗ ри╣ри╛риВ...',
        'gujarati': 'рк╣рк╡рк╛ркорк╛рки ркбрлЗркЯрк╛ ркорлЗрк│рк╡рлА рк░рк╣рлНркпрк╛ ркЫрлАркП...',
        'marathi': 'рд╣рд╡рд╛рдорд╛рди рдбреЗрдЯрд╛ рдорд┐рд│рд╡рдд рдЖрд╣реЗ...',
        'tamil': 'ро╡ро╛ройро┐ро▓рпИ родро░ро╡рпБроХро│рпИрокрпН рокрпЖро▒рпБроХро┐ро▒родрпБ...',
        'telugu': 'р░╡р░╛р░др░╛р░╡р░░р░г р░бр▒Зр░Яр░╛р░ир▒Б р░кр▒Кр░Вр░жр▒Бр░др▒Лр░Вр░жр░┐...',
        'bengali': 'ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ рждржерзНржп рж╕ржВржЧрзНрж░рж╣ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...',
        'kannada': 'р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓бр│Зр▓Яр▓╛р▓╡р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр│Бр▓др│Нр▓др▓┐р▓жр│Ж...'
    }
}

class WeatherService:
    def __init__(self, api_key: str):
        self.api_key = api_key

    def get_current_weather(self, city: str) -> Dict:
        """Get current weather data for a city"""
        url = f"{BASE_URL}/weather"
        params = {
            'q': city,
            'appid': self.api_key,
            'units': 'metric'
        }

        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            st.error(f"Error fetching current weather: {e}")
            return None

    def get_forecast(self, city: str, days: int = 3) -> Dict:
        """Get weather forecast for next few days"""
        url = f"{BASE_URL}/forecast"
        params = {
            'q': city,
            'appid': self.api_key,
            'units': 'metric',
            'cnt': days * 8  # 8 forecasts per day (every 3 hours)
        }

        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            st.error(f"Error fetching forecast: {e}")
            return None

class CropAlertSystem:
    def __init__(self):
        self.risk_thresholds = {
            'wind_speed': 15,  # m/s (54 km/hr)
            'heavy_rain': 20,  # mm/hour
            'hail_keywords': ['hail', 'thunderstorm', 'severe'],
            'temperature_low': 5,  # Celsius
            'temperature_high': 45,  # Celsius
            'humidity_high': 90  # %
        }

        self.crop_actions = {
            'high_wind': {
                'english': "Provide bamboo or wooden support to crops due to high winds. Remove plastic mulch.",
                'hindi': "рддреЗрдЬрд╝ рд╣рд╡рд╛ рдХреЗ рдХрд╛рд░рдг рдлрд╕рд▓ рдХреЛ рдмрд╛рдВрд╕ рдпрд╛ рд▓рдХрдбрд╝реА рд╕реЗ рд╕рд╣рд╛рд░рд╛ рджреАрдЬрд┐рдпреЗред рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ рдорд▓реНрдЪ рд╣рдЯрд╛рдПрдВред",
                'punjabi': "ридрйЗриЬри╝ ри╣ри╡ри╛ риХри╛ри░рии рилри╕ри▓ риирйВрй░ римри╛риВри╕ риЬри╛риВ ри▓рй▒риХрйЬ риири╛ри▓ ри╕ри╣ри╛ри░ри╛ рижри┐риУред рикри▓ри╛ри╕риЯри┐риХ риори▓риЪ ри╣риЯри╛риУред",
                'gujarati': "ркдрлЗркЬ рккрк╡ркиркирлЗ ркХрк╛рк░ркгрлЗ рккрк╛ркХркирлЗ рк╡рк╛ркВрк╕ ркЕркерк╡рк╛ рк▓рк╛ркХркбрк╛ркерлА ркЖркзрк╛рк░ ркЖрккрлЛред рккрлНрк▓рк╛рк╕рлНркЯрк┐ркХ ркорк▓рлНркЪ рк╣ркЯрк╛рк╡рлЛред",
                'marathi': "рдЬреЛрд░рджрд╛рд░ рд╡рд╛рд▒реНрдпрд╛рдореБрд│реЗ рдкрд┐рдХрд╛рд▓рд╛ рдмрд╛рдВрдмреВ рдХрд┐рдВрд╡рд╛ рд▓рд╛рдХрдбрд╛рдЪрд╛ рдЖрдзрд╛рд░ рджреНрдпрд╛ред рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ рдорд▓реНрдЪ рдХрд╛рдврд╛ред",
                'tamil': "ро╡ро▓рпБро╡ро╛рой роХро╛ро▒рпНро▒ро╛ро▓рпН рокропро┐ро░рпНроХро│рпБроХрпНроХрпБ роорпВроЩрпНроХро┐ро▓рпН роЕро▓рпНро▓родрпБ рооро░родрпНродро╛ро▓рпН роЖродро░ро╡рпБ роХрпКроЯрпБроЩрпНроХро│рпН. рокро┐ро│ро╛ро╕рпНроЯро┐роХрпН рооро▓рпНроЪрпН роЕроХро▒рпНро▒ро╡рпБроорпНред",
                'telugu': "р░мр░▓р░ор▒Ир░и р░Чр░╛р░▓р▒Бр░▓ р░╡р░▓р▒Нр░▓ р░кр░Вр░Яр░▓р░Хр▒Б р░╡р▒Жр░жр▒Бр░░р▒Б р░▓р▒Зр░жр░╛ р░Хр░▓р░кр░др▒Л р░ор░жр▒Нр░жр░др▒Б р░Зр░╡р▒Нр░╡р░Вр░бр░┐. р░кр▒Нр░▓р░╛р░╕р▒Нр░Яр░┐р░Хр▒Н р░ор░▓р▒Нр░Ър▒Н р░др▒Кр░▓р░Чр░┐р░Вр░Ър░Вр░бр░┐ред",
                'bengali': "ржкрзНрж░ржмрж▓ ржмрж╛рждрж╛рж╕рзЗрж░ ржХрж╛рж░ржгрзЗ ржлрж╕рж▓ржХрзЗ ржмрж╛ржБрж╢ ржмрж╛ ржХрж╛ржа ржжрж┐ржпрж╝рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзБржиред ржкрзНрж▓рж╛рж╕рзНржЯрж┐ржХ ржорж╛рж▓ржЪ рж╕рж░рж╛ржиред",
                'kannada': "р▓мр▓▓р▓╡р▓╛р▓ж р▓Чр▓╛р▓│р▓┐р▓пр▓┐р▓Вр▓жр▓╛р▓Чр▓┐ р▓мр│Жр▓│р│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓мр▓┐р▓жр▓┐р▓░р│Б р▓Ер▓ер▓╡р▓╛ р▓ор▓░р▓жр▓┐р▓Вр▓ж р▓мр│Жр▓Вр▓мр▓▓ р▓ир│Ар▓бр▓┐ред р▓кр│Нр▓▓р▓╛р▓╕р│Нр▓Яр▓┐р▓Хр│Н р▓ор▓▓р│Нр▓Ър│Н р▓др│Жр▓Чр│Жр▓жр│Бр▓╣р▓╛р▓Хр▓┐ред"
            },
            'heavy_rain': {
                'english': "Create proper drainage to prevent waterlogging. Cover crops if possible.",
                'hindi': "рднрд╛рд░реА рдмрд╛рд░рд┐рд╢ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдмрдирд╛рдПрдВред рдлрд╕рд▓ рдХреЛ рдврдХреЗрдВред",
                'punjabi': "рикри╛ригрйА ринри░рии ридрйЛриВ римриЪриг ри▓риИ ри╕ри╣рйА риири┐риХри╛ри╕ римригри╛риУред рилри╕ри▓ риирйВрй░ риврй▒риХрйЛред",
                'gujarati': "рккрк╛ркгрлА ркнрк░рк╛рк╡рк╛ркерлА ркмркЪрк╡рк╛ ркорк╛ркЯрлЗ ркпрлЛркЧрлНркп ркбрлНрк░рлЗркирлЗркЬ ркмркирк╛рк╡рлЛред рккрк╛ркХркирлЗ ркврк╛ркВркХрлЛред",
                'marathi': "рдкрд╛рдгреА рд╕рд╛рдЪрдгреНрдпрд╛рдкрд╛рд╕реВрди рд╡рд╛рдЪрдгреНрдпрд╛рд╕рд╛рдареА рдпреЛрдЧреНрдп рдирд┐рдЪрд░рд╛ рддрдпрд╛рд░ рдХрд░рд╛ред рдкрд┐рдХрд╛рдВрдирд╛ рдЭрд╛рдХреВрди рдареЗрд╡рд╛ред",
                'tamil': "роирпАро░рпН родрпЗроЩрпНроХрпБро╡родрпИродрпН родроЯрпБроХрпНроХ роЪро░ро┐ропро╛рой ро╡роЯро┐роХро╛ро▓рпН роЕроорпИроХрпНроХро╡рпБроорпН. рокропро┐ро░рпНроХро│рпИ роорпВроЯро╡рпБроорпНред",
                'telugu': "р░ир▒Ар░░р▒Б р░ир░┐р░▓р░┐р░Ър░┐р░кр▒Лр░Хр▒Бр░Вр░бр░╛ р░╕р░░р▒Ир░и р░бр▒Нр░░р▒Ир░ир▒Зр░Ьр▒А р░Ър▒Зр░пр░Вр░бр░┐. р░кр░Вр░Яр░▓р░ир▒Б р░Хр░кр▒Нр░кр░Вр░бр░┐ред",
                'bengali': "ржЬрж▓ ржЬржорж╛ рж░рзЛржз ржХрж░рждрзЗ рж╕ржарж┐ржХ ржирж┐ржХрж╛рж╢рж┐ ржмрзНржпржмрж╕рзНржерж╛ ржХрж░рзБржиред ржлрж╕рж▓ ржврзЗржХрзЗ рж░рж╛ржЦрзБржиред",
                'kannada': "р▓ир│Ар▓░р│Б р▓ир▓┐р▓▓р│Нр▓▓р│Бр▓╡р│Бр▓жр▓ир│Нр▓ир│Б р▓др▓бр│Жр▓пр▓▓р│Б р▓╕р▓░р▓┐р▓пр▓╛р▓ж р▓Тр▓│р▓Ър▓░р▓Вр▓бр▓┐ р▓ор▓╛р▓бр▓┐ред р▓мр│Жр▓│р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓ор│Бр▓Ър│Нр▓Ър▓┐ред"
            },
            'hail_risk': {
                'english': "Hail risk detected! Cover crops immediately with nets or tarpaulin.",
                'hindi': "рдУрд▓реЗ рдкрдбрд╝рдиреЗ рдХрд╛ рдЦрддрд░рд╛ рд╣реИ! рдлрд╕рд▓ рдХреЛ рддреБрд░рдВрдд рдЬрд╛рд▓ рдпрд╛ рддрд┐рд░рдкрд╛рд▓ рд╕реЗ рдврдХ рджреАрдЬрд┐рдпреЗред",
                'punjabi': "риЧрйЬрйЗ рикрйИриг рижри╛ риЦри╝ридри░ри╛ ри╣рйИ! рилри╕ри▓ риирйВрй░ ридрйБри░рй░рид риЬри╛ри▓ риЬри╛риВ ридри┐ри░рикри╛ри▓ риири╛ри▓ риврй▒риХрйЛред",
                'gujarati': "ркХрк░рк╛ рккркбрк╡рк╛ркирлБркВ ркЬрлЛркЦрко ркЫрлЗ! рккрк╛ркХркирлЗ ркдрлБрк░ркВркд ркЬрк╛рк│рлА ркЕркерк╡рк╛ ркдрк┐рк░рккрк╛рк▓ркерлА ркврк╛ркВркХрлЛред",
                'marathi': "рдЧрд╛рд░рдкреАрдЯ рдкрдбрдгреНрдпрд╛рдЪрд╛ рдзреЛрдХрд╛ рдЖрд╣реЗ! рдкрд┐рдХрд╛рдВрдирд╛ рддрд╛рдмрдбрддреЛрдм рдЬрд╛рд│реА рдХрд┐рдВрд╡рд╛ рддрд┐рд░рдкрд╛рд▓рдиреЗ рдЭрд╛рдХреВрди рдЯрд╛рдХрд╛ред",
                'tamil': "роХро▓рпНрооро┤рпИ роЖрокродрпНродрпБ! рокропро┐ро░рпНроХро│рпИ роЙроЯройрпЗ ро╡ро▓рпИ роЕро▓рпНро▓родрпБ родро╛ро░рпНрокрпНрокро╛ро▓ро┐ройро╛ро▓рпН роорпВроЯрпБроЩрпНроХро│рпНред",
                'telugu': "р░╡р░бр░Чр░│р▒Нр░│р▒Б р░кр░бр▒З р░кр▒Нр░░р░ор░╛р░жр░В! р░кр░Вр░Яр░▓р░ир▒Б р░╡р▒Жр░Вр░Яр░ир▒З р░╡р░▓р░▓р▒Б р░▓р▒Зр░жр░╛ р░др░╛р░░р▒Нр░кр░╛р░▓р░┐р░ир▒НтАМр░др▒Л р░Хр░кр▒Нр░кр░Вр░бр░┐ред",
                'bengali': "рж╢рж┐рж▓рж╛ржмрзГрж╖рзНржЯрж┐рж░ ржЭрзБржБржХрж┐! ржлрж╕рж▓ рждрзОржХрзНрж╖ржгрж╛рзО ржЬрж╛рж▓ ржмрж╛ рждрзЗрж░ржкрж▓ ржжрж┐ржпрж╝рзЗ ржврзЗржХрзЗ ржжрж┐ржиред",
                'kannada': "р▓Жр▓▓р▓┐р▓Хр▓▓р│Нр▓▓р│Б р▓Ер▓кр▓╛р▓п! р▓мр│Жр▓│р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓др▓Хр│Нр▓╖р▓г р▓мр▓▓р│Ж р▓Ер▓ер▓╡р▓╛ р▓др▓╛р▓░р│Нр▓кр▓╛р▓▓р▓┐р▓ир│НтАМр▓ир▓┐р▓Вр▓ж р▓ор│Бр▓Ър│Нр▓Ър▓┐ред"
            },
            'frost_risk': {
                'english': "Frost risk detected. Keep crops warm with smoke or heaters.",
                'hindi': "рдкрд╛рд▓рд╛ рдкрдбрд╝рдиреЗ рдХрд╛ рдбрд░ рд╣реИред рдлрд╕рд▓ рдХреЛ рдзреБрдЖрдВ рдпрд╛ рд╣реАрдЯрд░ рд╕реЗ рдЧрд░реНрдо рд░рдЦреЗрдВред",
                'punjabi': "рикри╛ри▓ри╛ рикрйИриг рижри╛ рибри░ ри╣рйИред рилри╕ри▓ риирйВрй░ ризрйВрй░риЖриВ риЬри╛риВ ри╣рйАриЯри░ риири╛ри▓ риЧри░рио ри░рй▒риЦрйЛред",
                'gujarati': "рк╣рк┐рко рккркбрк╡рк╛ркирлБркВ ркЬрлЛркЦрко ркЫрлЗ. рккрк╛ркХркирлЗ ркзрлБркорк╛ркбрк╛ ркЕркерк╡рк╛ рк╣рлАркЯрк░ркерлА ркЧрк░рко рк░рк╛ркЦрлЛред",
                'marathi': "рджрдВрд╡ рдкрдбрдгреНрдпрд╛рдЪрд╛ рдзреЛрдХрд╛ рдЖрд╣реЗ. рдкрд┐рдХрд╛рдВрдирд╛ рдзреВрд░ рдХрд┐рдВрд╡рд╛ рд╣реАрдЯрд░рдиреЗ рдЙрдмрджрд╛рд░ рдареЗрд╡рд╛ред",
                'tamil': "роЙро▒рпИрокройро┐ роЖрокродрпНродрпБ роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ. рокропро┐ро░рпНроХро│рпИ рокрпБроХрпИ роЕро▓рпНро▓родрпБ ро╣рпАроЯрпНроЯро░рпН роорпВро▓роорпН роЪрпВроЯро╛роХ ро╡рпИроХрпНроХро╡рпБроорпН.",
                'telugu': "р░ор░Вр░Ър▒Б р░кр▒Нр░░р░ор░╛р░жр░В р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐. р░кр░Вр░Яр░▓р░ир▒Б р░кр▒Кр░Ч р░▓р▒Зр░жр░╛ р░╣р▒Ар░Яр░░р▒НтАМр░др▒Л р░╡р▒Зр░бр░┐р░Чр░╛ р░Йр░Вр░Ър░Вр░бр░┐ред",
                'bengali': "рждрзБрж╖рж╛рж░ржкрж╛рждрзЗрж░ ржЭрзБржБржХрж┐ рж╢ржирж╛ржХрзНржд рж╣ржпрж╝рзЗржЫрзЗред ржзрзЛржБржпрж╝рж╛ ржмрж╛ рж╣рж┐ржЯрж╛рж░ ржжрж┐ржпрж╝рзЗ ржлрж╕рж▓ ржЧрж░ржо рж░рж╛ржЦрзБржиред",
                'kannada': "р▓╣р▓┐р▓о р▓Ер▓кр▓╛р▓п р▓кр▓др│Нр▓др│Жр▓пр▓╛р▓Чр▓┐р▓жр│Ж. р▓╣р│Кр▓Чр│Ж р▓Ер▓ер▓╡р▓╛ р▓╣р│Ар▓Яр▓░р│НтАМр▓ир▓┐р▓Вр▓ж р▓мр│Жр▓│р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓мр│Жр▓Ър│Нр▓Ър▓Чр▓╛р▓Чр▓┐р▓╕р▓┐."
            },
            'heat_wave': {
                'english': "Extreme heat detected. Use shade nets and increase irrigation.",
                'hindi': "рдмрд╣реБрдд рдЧрд░реНрдореА рд╣реИред рдлрд╕рд▓ рдХреЛ рдЫрд╛рдпрд╛ рдЬрд╛рд▓ рд▓рдЧрд╛рдПрдВ рдФрд░ рдЬреНрдпрд╛рджрд╛ рдкрд╛рдиреА рджреЗрдВред",
                'punjabi': "римри╣рйБрид риЧри░риорйА ри╣рйИред рилри╕ри▓ риирйВрй░ риЫри╛риВ рижрйЗ риЬри╛ри▓ ри▓риЧри╛риУ риЕридрйЗ риЬри╝ри┐риЖрижри╛ рикри╛ригрйА рижри┐риУред",
                'gujarati': "ркЕркдрк┐рк╢ркп ркЧрк░ркорлА ркЫрлЗ. рккрк╛ркХ рккрк░ ркЫрк╛ркпрк╛ркирлА ркЬрк╛рк│рлА рк▓ркЧрк╛рк╡рлЛ ркЕркирлЗ рк╡ркзрлБ рккрк╛ркгрлА ркЖрккрлЛ.",
                'marathi': "рдЕрддрд┐рд╢рдп рдЙрд╖реНрдгрддрд╛ рдЖрд╣реЗ. рдкрд┐рдХрд╛рдВрд╡рд░ рд╕рд╛рд╡рд▓реАрдЪреЗ рдЬрд╛рд│реЗ рд▓рд╛рд╡рд╛ рдЖрдгрд┐ рдЬрд╛рд╕реНрдд рдкрд╛рдгреА рджреНрдпрд╛ред",
                'tamil': "роХроЯрпБроорпИропро╛рой ро╡рпЖрокрпНрокроорпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ. роиро┐ро┤ро▓рпН ро╡ро▓рпИроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ роирпАро░рпНрокрпНрокро╛роЪройродрпНродрпИ роЕродро┐роХро░ро┐роХрпНроХро╡рпБроорпН.",
                'telugu': "р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░╡р▒Зр░бр░┐р░ор░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐. р░ир▒Ар░б р░╡р░▓р░▓р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░┐ р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓р░ир▒Б р░кр▒Жр░Вр░Ър░Вр░бр░┐ред",
                'bengali': "ржкрзНрж░ржЪржгрзНржб ржЧрж░ржо рж╢ржирж╛ржХрзНржд рж╣ржпрж╝рзЗржЫрзЗред ржЫрж╛ржпрж╝рж╛рж░ ржЬрж╛рж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржПржмржВ рж╕рзЗржЪ ржмрж╛ржбрж╝рж╛ржиред",
                'kannada': "р▓др│Ар▓╡р│Нр▓░ р▓╢р▓╛р▓Ц р▓кр▓др│Нр▓др│Жр▓пр▓╛р▓Чр▓┐р▓жр│Ж. р▓ир│Жр▓░р▓│р│Б р▓мр▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓мр▓│р▓╕р▓┐ р▓ор▓др│Нр▓др│Б р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐ р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓╕р▓┐."
            }
        }

    def analyze_weather_risks(self, weather_data: Dict) -> List[Dict]:
        """Analyze weather data and identify crop risks"""
        risks = []

        if not weather_data:
            return risks

        # Current weather analysis
        if 'main' in weather_data:
            temp = weather_data['main']['temp']
            humidity = weather_data['main']['humidity']

            if temp <= self.risk_thresholds['temperature_low']:
                risks.append({
                    'type': 'frost_risk',
                    'severity': 'high',
                    'message': self.crop_actions['frost_risk']
                })

            if temp >= self.risk_thresholds['temperature_high']:
                risks.append({
                    'type': 'heat_wave',
                    'severity': 'high',
                    'message': self.crop_actions['heat_wave']
                })

        if 'wind' in weather_data:
            wind_speed = weather_data['wind']['speed']
            if wind_speed >= self.risk_thresholds['wind_speed']:
                risks.append({
                    'type': 'high_wind',
                    'severity': 'medium',
                    'message': self.crop_actions['high_wind']
                })

        if 'weather' in weather_data:
            weather_desc = weather_data['weather'][0]['description'].lower()
            for keyword in self.risk_thresholds['hail_keywords']:
                if keyword in weather_desc:
                    risks.append({
                        'type': 'hail_risk',
                        'severity': 'critical',
                        'message': self.crop_actions['hail_risk']
                    })
                    break

        return risks

    def analyze_forecast_risks(self, forecast_data: Dict) -> List[Dict]:
        """Analyze forecast data for upcoming risks"""
        risks = []

        if not forecast_data or 'list' not in forecast_data:
            return risks

        for forecast in forecast_data['list'][:24]:  # Next 3 days (8 forecasts per day)
            dt = datetime.fromtimestamp(forecast['dt'])

            # Check for heavy rain
            if 'rain' in forecast and '3h' in forecast['rain']:
                rain_3h = forecast['rain']['3h']
                if rain_3h > self.risk_thresholds['heavy_rain']:
                    risks.append({
                        'type': 'heavy_rain',
                        'severity': 'high',
                        'time': dt.strftime('%Y-%m-%d %H:%M'),
                        'message': self.crop_actions['heavy_rain']
                    })

            # Check weather conditions
            weather_desc = forecast['weather'][0]['description'].lower()
            for keyword in self.risk_thresholds['hail_keywords']:
                if keyword in weather_desc:
                    risks.append({
                        'type': 'hail_risk',
                        'severity': 'critical',
                        'time': dt.strftime('%Y-%m-%d %H:%M'),
                        'message': self.crop_actions['hail_risk']
                    })
                    break

        return risks

class VoiceAlert:
    def __init__(self):
        self.engine = None
        self.initialize_tts()

    def initialize_tts(self):
        """Initialize text-to-speech engine"""
        try:
            self.engine = pyttsx3.init()
            # Set properties
            self.engine.setProperty('rate', 150)  # Speed of speech
            self.engine.setProperty('volume', 0.9)  # Volume level
        except Exception as e:
            st.warning(f"Voice alert system not available: {e}")

    def speak_alert(self, message: str, language: str = 'hindi'):
        """Speak the alert message"""
        if not self.engine:
            return

        def speak():
            try:
                self.engine.say(message)
                self.engine.runAndWait()
            except Exception as e:
                print(f"Error in voice alert: {e}")

        # Run in separate thread to avoid blocking
        thread = threading.Thread(target=speak)
        thread.daemon = True
        thread.start()

def create_weather_chart(forecast_data: Dict) -> go.Figure:
    """Create weather forecast visualization"""
    if not forecast_data or 'list' not in forecast_data:
        return None

    dates = []
    temps = []
    humidity = []
    wind_speeds = []
    rain = []

    for forecast in forecast_data['list'][:24]:  # Next 3 days
        dt = datetime.fromtimestamp(forecast['dt'])
        dates.append(dt)
        temps.append(forecast['main']['temp'])
        humidity.append(forecast['main']['humidity'])
        wind_speeds.append(forecast['wind']['speed'] * 3.6)  # Convert to km/h

        rain_val = 0
        if 'rain' in forecast and '3h' in forecast['rain']:
            rain_val = forecast['rain']['3h']
        rain.append(rain_val)

    # Create subplots
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('Temperature (┬░C)', 'Humidity (%)', 'Wind Speed (km/h)', 'Rainfall (mm)'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}]]
    )

    # Temperature
    fig.add_trace(
        go.Scatter(x=dates, y=temps, mode='lines+markers', name='Temperature', line=dict(color='red')),
        row=1, col=1
    )

    # Humidity
    fig.add_trace(
        go.Scatter(x=dates, y=humidity, mode='lines+markers', name='Humidity', line=dict(color='blue')),
        row=1, col=2
    )

    # Wind Speed
    fig.add_trace(
        go.Scatter(x=dates, y=wind_speeds, mode='lines+markers', name='Wind Speed', line=dict(color='green')),
        row=2, col=1
    )

    # Rainfall
    fig.add_trace(
        go.Bar(x=dates, y=rain, name='Rainfall', marker_color='lightblue'),
        row=2, col=2
    )

    fig.update_layout(height=600, showlegend=False, title_text="3-Day Weather Forecast")
    return fig

def main():
    st.set_page_config(
        page_title="Crop Weather Shield",
        page_icon="ЁЯМ╛",
        layout="wide"
    )

    # Initialize services
    weather_service = WeatherService(WEATHER_API_KEY)
    alert_system = CropAlertSystem()
    voice_alert = VoiceAlert()

    # Sidebar for settings
    st.sidebar.header("Settings")
    city = st.sidebar.text_input("Enter your city:", value="Delhi")

    # Language selection with native names
    language_options = {lang_data['name']: lang_key for lang_key, lang_data in LANGUAGES.items()}
    selected_language_name = st.sidebar.selectbox(
        "Language / рднрд╛рд╖рд╛ / ринри╛ри╕ри╝ри╛ / ркнрк╛рк╖рк╛ / рднрд╛рд╖рд╛ / роорпКро┤ро┐ / р░нр░╛р░╖ / ржнрж╛рж╖рж╛ / р▓нр▓╛р▓╖р│Ж:",
        list(language_options.keys())
    )
    language = language_options[selected_language_name]

    voice_enabled = st.sidebar.checkbox(UI_TEXT['voice_alerts'][language], value=True)

    # Dynamic title and subtitle based on selected language
    st.title(UI_TEXT['title'][language])
    st.markdown(UI_TEXT['subtitle'][language])

    # Main weather forecasting button
    if st.button(UI_TEXT['get_forecast'][language], type="primary", use_container_width=True):
        if not city:
            st.error(UI_TEXT['error_city'][language])
            return

        if WEATHER_API_KEY == "your_openweathermap_api_key_here":
            st.error(UI_TEXT['error_api'][language])
            return

        with st.spinner(UI_TEXT['fetching_data'][language]):
            # Get current weather
            current_weather = weather_service.get_current_weather(city)
            forecast_data = weather_service.get_forecast(city, days=3)

            if current_weather and forecast_data:
                col1, col2 = st.columns([1, 1])

                with col1:
                    st.subheader(UI_TEXT['current_weather'][language])
                    temp = current_weather['main']['temp']
                    feels_like = current_weather['main']['feels_like']
                    humidity = current_weather['main']['humidity']
                    wind_speed = current_weather['wind']['speed'] * 3.6  # Convert to km/h
                    description = current_weather['weather'][0]['description'].title()

                    st.metric("Temperature", f"{temp}┬░C", f"Feels like {feels_like}┬░C")
                    st.metric("Humidity", f"{humidity}%")
                    st.metric("Wind Speed", f"{wind_speed:.1f} km/h")
                    st.info(f"Condition: {description}")

                with col2:
                    st.subheader(UI_TEXT['crop_risk_analysis'][language])

                    # Analyze current risks
                    current_risks = alert_system.analyze_weather_risks(current_weather)
                    forecast_risks = alert_system.analyze_forecast_risks(forecast_data)

                    all_risks = current_risks + forecast_risks

                    if all_risks:
                        for risk in all_risks:
                            severity_color = {
                                'critical': 'ЁЯФ┤',
                                'high': 'ЁЯЯа',
                                'medium': 'ЁЯЯб'
                            }.get(risk['severity'], 'ЁЯЯв')

                            message = risk['message'][language]
                            st.warning(f"{severity_color} **{risk['type'].replace('_', ' ').title()}**\n\n{message}")

                            # Voice alert for critical risks
                            if voice_enabled and risk['severity'] == 'critical':
                                voice_alert.speak_alert(message, language)
                    else:
                        st.success(UI_TEXT['no_risks'][language])

                # Weather forecast chart
                st.subheader(UI_TEXT['forecast_chart'][language])
                chart = create_weather_chart(forecast_data)
                if chart:
                    st.plotly_chart(chart, use_container_width=True)

                # Detailed forecast table
                st.subheader(UI_TEXT['detailed_forecast'][language])
                forecast_df = []
                for forecast in forecast_data['list'][:24]:
                    dt = datetime.fromtimestamp(forecast['dt'])
                    forecast_df.append({
                        'Date': dt.strftime('%Y-%m-%d'),
                        'Time': dt.strftime('%H:%M'),
                        'Temperature (┬░C)': forecast['main']['temp'],
                        'Humidity (%)': forecast['main']['humidity'],
                        'Wind Speed (km/h)': round(forecast['wind']['speed'] * 3.6, 1),
                        'Condition': forecast['weather'][0]['description'].title()
                    })

                df = pd.DataFrame(forecast_df)
                st.dataframe(df, use_container_width=True)

if __name__ == "__main__":
    main()