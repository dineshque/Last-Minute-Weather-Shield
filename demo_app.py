import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import random
import time

# Language configurations
LANGUAGES = {
    'english': {'name': 'English', 'code': 'en'},
    'hindi': {'name': 'рд╣рд┐рдВрджреА', 'code': 'hi'},
    'punjabi': {'name': 'рикрй░риЬри╛римрйА', 'code': 'pa'},
    'gujarati': {'name': 'ркЧрлБркЬрк░рк╛ркдрлА', 'code': 'gu'},
    'marathi': {'name': 'рдорд░рд╛рдареА', 'code': 'mr'},
    'tamil': {'name': 'родрооро┐ро┤рпН', 'code': 'ta'},
    'telugu': {'name': 'р░др▒Жр░▓р▒Бр░Чр▒Б', 'code': 'te'},
    'bengali': {'name': 'ржмрж╛ржВрж▓рж╛', 'code': 'bn'},
    'kannada': {'name': 'р▓Хр▓ир│Нр▓ир▓б', 'code': 'kn'}
}

# UI Text translations
UI_TEXT = {
    'title': {
        'english': 'ЁЯМ╛ Last-Minute Weather Shield - Demo Version',
        'hindi': 'ЁЯМ╛ рдЕрдВрддрд┐рдо рд╕рдордп рдореМрд╕рдо рд╕реБрд░рдХреНрд╖рд╛ - рдбреЗрдореЛ рд╕рдВрд╕реНрдХрд░рдг',
        'punjabi': 'ЁЯМ╛ риЖриЦри░рйА ри╕риорйЗриВ риорйМри╕рио ри╕рйБри░рй▒риЦри┐риЖ - рибрйИриорйЛ ри╕рй░ри╕риХри░риг',
        'gujarati': 'ЁЯМ╛ ркЫрлЗрк▓рлНрк▓рлА ркШркбрлАркирлА рк╣рк╡рк╛ркорк╛рки рк╕рлБрк░ркХрлНрк╖рк╛ - ркбрлЗркорлЛ рк╡рк░рлНркЭрки',
        'marathi': 'ЁЯМ╛ рд╢реЗрд╡рдЯрдЪреНрдпрд╛ рдХреНрд╖рдгреА рд╣рд╡рд╛рдорд╛рди рд╕рдВрд░рдХреНрд╖рдг - рдбреЗрдореЛ рдЖрд╡реГрддреНрддреА',
        'tamil': 'ЁЯМ╛ роХроЯрпИроЪро┐ роиро┐рооро┐роЯ ро╡ро╛ройро┐ро▓рпИ рокро╛родрпБроХро╛рокрпНрокрпБ - роЯрпЖроорпЛ рокродро┐рокрпНрокрпБ',
        'telugu': 'ЁЯМ╛ р░Ър░┐р░╡р░░р░┐ р░ир░┐р░ор░┐р░╖р░В р░╡р░╛р░др░╛р░╡р░░р░г р░░р░Хр▒Нр░╖р░г - р░бр▒Жр░ор▒Л р░╡р▒Жр░░р▒Нр░╖р░ир▒Н',
        'bengali': 'ЁЯМ╛ рж╢рзЗрж╖ ржорзБрж╣рзВрж░рзНрждрзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рзБрж░ржХрзНрж╖рж╛ - ржбрзЗржорзЛ рж╕ржВрж╕рзНржХрж░ржг',
        'kannada': 'ЁЯМ╛ р▓Хр│Кр▓ир│Жр▓п р▓ир▓┐р▓ор▓┐р▓╖р▓ж р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓░р▓Хр│Нр▓╖р▓гр│Ж - р▓бр│Жр▓ор│Л р▓Жр▓╡р│Гр▓др│Нр▓др▓┐'
    },
    'subtitle': {
        'english': '*Weather alerts and action suggestions for crop protection (Demo with sample data)*',
        'hindi': '*рдлрд╕рд▓ рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рдореМрд╕рдо рдЕрд▓рд░реНрдЯ рдФрд░ рдХрд╛рд░реНрдп рд╕реБрдЭрд╛рд╡ (рдирдореВрдирд╛ рдбреЗрдЯрд╛ рдХреЗ рд╕рд╛рде рдбреЗрдореЛ)*',
        'punjabi': '*рилри╕ри▓ ри╕рйБри░рй▒риЦри┐риЖ ри▓риИ риорйМри╕рио риЕри▓ри░риЯ риЕридрйЗ риХри╛ри░ри╡ри╛риИ ри╕рйБриЭри╛риЕ (риириорйВриири╛ рибрйЗриЯри╛ риири╛ри▓ рибрйИриорйЛ)*',
        'gujarati': '*рккрк╛ркХ рк╕рлБрк░ркХрлНрк╖рк╛ ркорк╛ркЯрлЗ рк╣рк╡рк╛ркорк╛рки ркЕрк▓рк░рлНркЯ ркЕркирлЗ ркХрк╛рк░рлНркп рк╕рлВркЪркирлЛ (ркиркорлВркирк╛ ркбрлЗркЯрк╛ рк╕рк╛ркерлЗ ркбрлЗркорлЛ)*',
        'marathi': '*рдкреАрдХ рд╕рдВрд░рдХреНрд╖рдгрд╛рд╕рд╛рдареА рд╣рд╡рд╛рдорд╛рди рдЕрд▓рд░реНрдЯ рдЖрдгрд┐ рдХреГрддреА рд╕реВрдЪрдирд╛ (рдирдореБрдирд╛ рдбреЗрдЯрд╛рд╕рд╣ рдбреЗрдореЛ)*',
        'tamil': '*рокропро┐ро░рпН рокро╛родрпБроХро╛рокрпНрокро┐ро▒рпНроХро╛рой ро╡ро╛ройро┐ро▓рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН рооро▒рпНро▒рпБроорпН роЪрпЖропро▓рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН (рооро╛родро┐ро░ро┐ родро░ро╡рпБроХро│рпБроЯройрпН роЯрпЖроорпЛ)*',
        'telugu': '*р░кр░Вр░Я р░░р░Хр▒Нр░╖р░г р░Хр▒Лр░╕р░В р░╡р░╛р░др░╛р░╡р░░р░г р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б р░ор░░р░┐р░пр▒Б р░Ър░░р▒Нр░п р░╕р▒Вр░Ър░ир░▓р▒Б (р░ир░ор▒Вр░ир░╛ р░бр▒Зр░Яр░╛р░др▒Л р░бр▒Жр░ор▒Л)*',
        'bengali': '*ржлрж╕рж▓ рж╕рзБрж░ржХрзНрж╖рж╛рж░ ржЬржирзНржп ржЖржмрж╣рж╛ржУржпрж╝рж╛ рж╕рждрж░рзНржХрждрж╛ ржПржмржВ ржХрж░рзНржо ржкрж░рж╛ржорж░рзНрж╢ (ржиржорзБржирж╛ ржбрзЗржЯрж╛ рж╕рж╣ ржбрзЗржорзЛ)*',
        'kannada': '*р▓мр│Жр▓│р│Ж р▓░р▓Хр│Нр▓╖р▓гр│Жр▓Чр▓╛р▓Чр▓┐ р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓Ор▓Ър│Нр▓Ър▓░р▓┐р▓Хр│Жр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Хр│Нр▓░р▓┐р▓пр▓╛ р▓╕р▓▓р▓╣р│Жр▓Чр▓│р│Б (р▓ор▓╛р▓жр▓░р▓┐ р▓бр│Зр▓Яр▓╛р▓жр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓бр│Жр▓ор│Л)*'
    },
    'demo_info': {
        'english': 'ЁЯФФ This is a demo version using sample weather data. For real weather data, use the main app with OpenWeatherMap API key.',
        'hindi': 'ЁЯФФ рдпрд╣ рдирдореВрдирд╛ рдореМрд╕рдо рдбреЗрдЯрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ рдбреЗрдореЛ рд╕рдВрд╕реНрдХрд░рдг рд╣реИред рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдореМрд╕рдо рдбреЗрдЯрд╛ рдХреЗ рд▓рд┐рдП, OpenWeatherMap API key рдХреЗ рд╕рд╛рде рдореБрдЦреНрдп рдРрдк рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред',
        'punjabi': 'ЁЯФФ риЗри╣ риириорйВриири╛ риорйМри╕рио рибрйЗриЯри╛ рижрйА ри╡ри░ридрйЛриВ риХри░рии ри╡ри╛ри▓ри╛ рибрйИриорйЛ ри╕рй░ри╕риХри░риг ри╣рйИред риЕри╕ри▓ риорйМри╕рио рибрйЗриЯри╛ ри▓риИ, OpenWeatherMap API key риири╛ри▓ риорйБрй▒риЦ риРрик рижрйА ри╡ри░ридрйЛриВ риХри░рйЛред',
        'gujarati': 'ЁЯФФ ркЖ ркиркорлВркирк╛ рк╣рк╡рк╛ркорк╛рки ркбрлЗркЯрк╛ркирлЛ ркЙрккркпрлЛркЧ ркХрк░ркдрлБркВ ркбрлЗркорлЛ рк╡рк░рлНркЭрки ркЫрлЗ. рк╡рк╛рк╕рлНркдрк╡рк┐ркХ рк╣рк╡рк╛ркорк╛рки ркбрлЗркЯрк╛ ркорк╛ркЯрлЗ, OpenWeatherMap API key рк╕рк╛ркерлЗ ркорлБркЦрлНркп ркПрккрлНрк▓рк┐ркХрлЗрк╢ркиркирлЛ ркЙрккркпрлЛркЧ ркХрк░рлЛ.',
        'marathi': 'ЁЯФФ рд╣реЗ рдирдореБрдирд╛ рд╣рд╡рд╛рдорд╛рди рдбреЗрдЯрд╛ рд╡рд╛рдкрд░рдгрд╛рд░реА рдбреЗрдореЛ рдЖрд╡реГрддреНрддреА рдЖрд╣реЗ. рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╣рд╡рд╛рдорд╛рди рдбреЗрдЯрд╛рд╕рд╛рдареА, OpenWeatherMap API key рд╕рд╣ рдореБрдЦреНрдп рдЕреЕрдк рд╡рд╛рдкрд░рд╛.',
        'tamil': 'ЁЯФФ роЗродрпБ рооро╛родро┐ро░ро┐ ро╡ро╛ройро┐ро▓рпИ родро░ро╡рпБроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроорпН роЯрпЖроорпЛ рокродро┐рокрпНрокрпБ. роЙрогрпНроорпИропро╛рой ро╡ро╛ройро┐ро▓рпИ родро░ро╡рпБроХро│рпБроХрпНроХрпБ, OpenWeatherMap API key роЙроЯройрпН роорпБроХрпНроХро┐роп рокропройрпНрокро╛роЯрпНроЯрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.',
        'telugu': 'ЁЯФФ р░Зр░жр░┐ р░ир░ор▒Вр░ир░╛ р░╡р░╛р░др░╛р░╡р░░р░г р░бр▒Зр░Яр░╛р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър▒З р░бр▒Жр░ор▒Л р░╡р▒Жр░░р▒Нр░╖р░ир▒Н. р░ир░┐р░Ьр░ор▒Ир░и р░╡р░╛р░др░╛р░╡р░░р░г р░бр▒Зр░Яр░╛ р░Хр▒Лр░╕р░В, OpenWeatherMap API key р░др▒Л р░кр▒Нр░░р░зр░╛р░и р░пр░╛р░кр▒НтАМр░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐.',
        'bengali': 'ЁЯФФ ржПржЯрж┐ ржиржорзБржирж╛ ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ рждржерзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржПржХржЯрж┐ ржбрзЗржорзЛ рж╕ржВрж╕рзНржХрж░ржгред ржкрзНрж░ржХрзГржд ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ рждржерзНржпрзЗрж░ ржЬржирзНржп, OpenWeatherMap API key рж╕рж╣ ржорзВрж▓ ржЕрзНржпрж╛ржк ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред',
        'kannada': 'ЁЯФФ р▓Зр▓жр│Б р▓ор▓╛р▓жр▓░р▓┐ р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓бр│Зр▓Яр▓╛р▓╡р▓ир│Нр▓ир│Б р▓мр▓│р▓╕р│Бр▓╡ р▓бр│Жр▓ор│Л р▓Жр▓╡р│Гр▓др│Нр▓др▓┐. р▓ир▓┐р▓Ьр▓╡р▓╛р▓ж р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓бр│Зр▓Яр▓╛р▓Чр▓╛р▓Чр▓┐, OpenWeatherMap API key р▓пр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓ор│Бр▓Цр│Нр▓п р▓Ер▓кр│Нр▓▓р▓┐р▓Хр│Зр▓╢р▓ир│Н р▓Ер▓ир│Нр▓ир│Б р▓мр▓│р▓╕р▓┐.'
    },
    'get_forecast_demo': {
        'english': 'ЁЯМдя╕П Get Weather Forecast (Demo)',
        'hindi': 'ЁЯМдя╕П рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ (рдбреЗрдореЛ)',
        'punjabi': 'ЁЯМдя╕П риорйМри╕рио рикрйВри░ри╡ риЕриирйБриори╛рии рикрйНри░ри╛рикрид риХри░рйЛ (рибрйИриорйЛ)',
        'gujarati': 'ЁЯМдя╕П рк╣рк╡рк╛ркорк╛рки ркЖркЧрк╛рк╣рлА ркорлЗрк│рк╡рлЛ (ркбрлЗркорлЛ)',
        'marathi': 'ЁЯМдя╕П рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ рдорд┐рд│рд╡рд╛ (рдбреЗрдореЛ)',
        'tamil': 'ЁЯМдя╕П ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ рокрпЖро▒рпБроЩрпНроХро│рпН (роЯрпЖроорпЛ)',
        'telugu': 'ЁЯМдя╕П р░╡р░╛р░др░╛р░╡р░░р░г р░╕р▒Вр░Ър░и р░кр▒Кр░Вр░жр░Вр░бр░┐ (р░бр▒Жр░ор▒Л)',
        'bengali': 'ЁЯМдя╕П ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕ ржкрж╛ржи (ржбрзЗржорзЛ)',
        'kannada': 'ЁЯМдя╕П р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор│Бр▓ир│Нр▓ир│Лр▓Я р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐ (р▓бр│Жр▓ор│Л)'
    }
}

# Demo data generator
def generate_demo_weather_data():
    """Generate realistic demo weather data"""
    current_time = datetime.now()
    
    # Current weather
    current_weather = {
        'main': {
            'temp': random.uniform(15, 35),
            'feels_like': random.uniform(15, 35),
            'humidity': random.randint(40, 90)
        },
        'wind': {
            'speed': random.uniform(2, 20)  # m/s
        },
        'weather': [{
            'description': random.choice(['clear sky', 'few clouds', 'scattered clouds', 
                                        'broken clouds', 'shower rain', 'rain', 
                                        'thunderstorm', 'snow', 'mist'])
        }]
    }
    
    # Forecast data
    forecast_data = {'list': []}
    for i in range(24):  # 3 days, 8 forecasts per day
        forecast_time = current_time + timedelta(hours=i*3)
        forecast = {
            'dt': int(forecast_time.timestamp()),
            'main': {
                'temp': random.uniform(10, 40),
                'humidity': random.randint(30, 95)
            },
            'wind': {
                'speed': random.uniform(1, 25)
            },
            'weather': [{
                'description': random.choice(['clear sky', 'few clouds', 'scattered clouds',
                                            'broken clouds', 'shower rain', 'rain',
                                            'thunderstorm', 'snow', 'mist'])
            }]
        }
        
        # Add rain data randomly
        if random.random() < 0.3:  # 30% chance of rain
            forecast['rain'] = {'3h': random.uniform(0.5, 25)}
        
        forecast_data['list'].append(forecast)
    
    return current_weather, forecast_data

class CropAlertSystem:
    def __init__(self):
        self.risk_thresholds = {
            'wind_speed': 15,  # m/s (54 km/hr)
            'heavy_rain': 20,  # mm/hour
            'hail_keywords': ['hail', 'thunderstorm', 'severe'],
            'temperature_low': 5,  # Celsius
            'temperature_high': 45,  # Celsius
            'humidity_high': 90  # %
        }
        
        self.crop_actions = {
            'high_wind': {
                'english': "Provide bamboo or wooden support to crops due to high winds. Remove plastic mulch.",
                'hindi': "рддреЗрдЬрд╝ рд╣рд╡рд╛ рдХреЗ рдХрд╛рд░рдг рдлрд╕рд▓ рдХреЛ рдмрд╛рдВрд╕ рдпрд╛ рд▓рдХрдбрд╝реА рд╕реЗ рд╕рд╣рд╛рд░рд╛ рджреАрдЬрд┐рдпреЗред рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ рдорд▓реНрдЪ рд╣рдЯрд╛рдПрдВред",
                'punjabi': "ридрйЗриЬри╝ ри╣ри╡ри╛ риХри╛ри░рии рилри╕ри▓ риирйВрй░ римри╛риВри╕ риЬри╛риВ ри▓рй▒риХрйЬ риири╛ри▓ ри╕ри╣ри╛ри░ри╛ рижри┐риУред рикри▓ри╛ри╕риЯри┐риХ риори▓риЪ ри╣риЯри╛риУред",
                'gujarati': "ркдрлЗркЬ рккрк╡ркиркирлЗ ркХрк╛рк░ркгрлЗ рккрк╛ркХркирлЗ рк╡рк╛ркВрк╕ ркЕркерк╡рк╛ рк▓рк╛ркХркбрк╛ркерлА ркЖркзрк╛рк░ ркЖрккрлЛред рккрлНрк▓рк╛рк╕рлНркЯрк┐ркХ ркорк▓рлНркЪ рк╣ркЯрк╛рк╡рлЛред",
                'marathi': "рдЬреЛрд░рджрд╛рд░ рд╡рд╛рд▒реНрдпрд╛рдореБрд│реЗ рдкрд┐рдХрд╛рд▓рд╛ рдмрд╛рдВрдмреВ рдХрд┐рдВрд╡рд╛ рд▓рд╛рдХрдбрд╛рдЪрд╛ рдЖрдзрд╛рд░ рджреНрдпрд╛ред рдкреНрд▓рд╛рд╕реНрдЯрд┐рдХ рдорд▓реНрдЪ рдХрд╛рдврд╛ред",
                'tamil': "ро╡ро▓рпБро╡ро╛рой роХро╛ро▒рпНро▒ро╛ро▓рпН рокропро┐ро░рпНроХро│рпБроХрпНроХрпБ роорпВроЩрпНроХро┐ро▓рпН роЕро▓рпНро▓родрпБ рооро░родрпНродро╛ро▓рпН роЖродро░ро╡рпБ роХрпКроЯрпБроЩрпНроХро│рпН. рокро┐ро│ро╛ро╕рпНроЯро┐роХрпН рооро▓рпНроЪрпН роЕроХро▒рпНро▒ро╡рпБроорпНред",
                'telugu': "р░мр░▓р░ор▒Ир░и р░Чр░╛р░▓р▒Бр░▓ р░╡р░▓р▒Нр░▓ р░кр░Вр░Яр░▓р░Хр▒Б р░╡р▒Жр░жр▒Бр░░р▒Б р░▓р▒Зр░жр░╛ р░Хр░▓р░кр░др▒Л р░ор░жр▒Нр░жр░др▒Б р░Зр░╡р▒Нр░╡р░Вр░бр░┐ред р░кр▒Нр░▓р░╛р░╕р▒Нр░Яр░┐р░Хр▒Н р░ор░▓р▒Нр░Ър▒Н р░др▒Кр░▓р░Чр░┐р░Вр░Ър░Вр░бр░┐ред",
                'bengali': "ржкрзНрж░ржмрж▓ ржмрж╛рждрж╛рж╕рзЗрж░ ржХрж╛рж░ржгрзЗ ржлрж╕рж▓ржХрзЗ ржмрж╛ржБрж╢ ржмрж╛ ржХрж╛ржа ржжрж┐ржпрж╝рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзБржиред ржкрзНрж▓рж╛рж╕рзНржЯрж┐ржХ ржорж╛рж▓ржЪ рж╕рж░рж╛ржиред",
                'kannada': "р▓мр▓▓р▓╡р▓╛р▓ж р▓Чр▓╛р▓│р▓┐р▓пр▓┐р▓Вр▓жр▓╛р▓Чр▓┐ р▓мр│Жр▓│р│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓мр▓┐р▓жр▓┐р▓░р│Б р▓Ер▓ер▓╡р▓╛ р▓ор▓░р▓жр▓┐р▓Вр▓ж р▓мр│Жр▓Вр▓мр▓▓ р▓ир│Ар▓бр▓┐ред р▓кр│Нр▓▓р▓╛р▓╕р│Нр▓Яр▓┐р▓Хр│Н р▓ор▓▓р│Нр▓Ър│Н р▓др│Жр▓Чр│Жр▓жр│Бр▓╣р▓╛р▓Хр▓┐ред"
            },
            'heavy_rain': {
                'english': "Create proper drainage to prevent waterlogging. Cover crops if possible.",
                'hindi': "рднрд╛рд░реА рдмрд╛рд░рд┐рд╢ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдЬрд▓ рдирд┐рдХрд╛рд╕реА рдмрдирд╛рдПрдВред рдлрд╕рд▓ рдХреЛ рдврдХреЗрдВред",
                'punjabi': "рикри╛ригрйА ринри░рии ридрйЛриВ римриЪриг ри▓риИ ри╕ри╣рйА риири┐риХри╛ри╕ римригри╛риУред рилри╕ри▓ риирйВрй░ риврй▒риХрйЛред",
                'gujarati': "рккрк╛ркгрлА ркнрк░рк╛рк╡рк╛ркерлА ркмркЪрк╡рк╛ ркорк╛ркЯрлЗ ркпрлЛркЧрлНркп ркбрлНрк░рлЗркирлЗркЬ ркмркирк╛рк╡рлЛред рккрк╛ркХркирлЗ ркврк╛ркВркХрлЛред",
                'marathi': "рдкрд╛рдгреА рд╕рд╛рдЪрдгреНрдпрд╛рдкрд╛рд╕реВрди рд╡рд╛рдЪрдгреНрдпрд╛рд╕рд╛рдареА рдпреЛрдЧреНрдп рдирд┐рдЪрд░рд╛ рддрдпрд╛рд░ рдХрд░рд╛ред рдкрд┐рдХрд╛рдВрдирд╛ рдЭрд╛рдХреВрди рдареЗрд╡рд╛ред",
                'tamil': "роирпАро░рпН родрпЗроЩрпНроХрпБро╡родрпИродрпН родроЯрпБроХрпНроХ роЪро░ро┐ропро╛рой ро╡роЯро┐роХро╛ро▓рпН роЕроорпИроХрпНроХро╡рпБроорпН. рокропро┐ро░рпНроХро│рпИ роорпВроЯро╡рпБроорпНред",
                'telugu': "р░ир▒Ар░░р▒Б р░ир░┐р░▓р░┐р░Ър░┐р░кр▒Лр░Хр▒Бр░Вр░бр░╛ р░╕р░░р▒Ир░и р░бр▒Нр░░р▒Ир░ир▒Зр░Ьр▒А р░Ър▒Зр░пр░Вр░бр░┐ред р░кр░Вр░Яр░▓р░ир▒Б р░Хр░кр▒Нр░кр░Вр░бр░┐ред",
                'bengali': "ржЬрж▓ ржЬржорж╛ рж░рзЛржз ржХрж░рждрзЗ рж╕ржарж┐ржХ ржирж┐ржХрж╛рж╢рж┐ ржмрзНржпржмрж╕рзНржерж╛ ржХрж░рзБржиред ржлрж╕рж▓ ржврзЗржХрзЗ рж░рж╛ржЦрзБржиред",
                'kannada': "р▓ир│Ар▓░р│Б р▓ир▓┐р▓▓р│Нр▓▓р│Бр▓╡р│Бр▓жр▓ир│Нр▓ир│Б р▓др▓бр│Жр▓пр▓▓р│Б р▓╕р▓░р▓┐р▓пр▓╛р▓ж р▓Тр▓│р▓Ър▓░р▓Вр▓бр▓┐ р▓ор▓╛р▓бр▓┐ред р▓мр│Жр▓│р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓ор│Бр▓Ър│Нр▓Ър▓┐ред"
            },
            'hail_risk': {
                'english': "Hail risk detected! Cover crops immediately with nets or tarpaulin.",
                'hindi': "рдУрд▓реЗ рдкрдбрд╝рдиреЗ рдХрд╛ рдЦрддрд░рд╛ рд╣реИ! рдлрд╕рд▓ рдХреЛ рддреБрд░рдВрдд рдЬрд╛рд▓ рдпрд╛ рддрд┐рд░рдкрд╛рд▓ рд╕реЗ рдврдХ рджреАрдЬрд┐рдпреЗред",
                'punjabi': "риЧрйЬрйЗ рикрйИриг рижри╛ риЦри╝ридри░ри╛ ри╣рйИ! рилри╕ри▓ риирйВрй░ ридрйБри░рй░рид риЬри╛ри▓ риЬри╛риВ ридри┐ри░рикри╛ри▓ риири╛ри▓ риврй▒риХрйЛред",
                'gujarati': "ркХрк░рк╛ рккркбрк╡рк╛ркирлБркВ ркЬрлЛркЦрко ркЫрлЗ! рккрк╛ркХркирлЗ ркдрлБрк░ркВркд ркЬрк╛рк│рлА ркЕркерк╡рк╛ ркдрк┐рк░рккрк╛рк▓ркерлА ркврк╛ркВркХрлЛред",
                'marathi': "рдЧрд╛рд░рдкреАрдЯ рдкрдбрдгреНрдпрд╛рдЪрд╛ рдзреЛрдХрд╛ рдЖрд╣реЗ! рдкрд┐рдХрд╛рдВрдирд╛ рддрд╛рдмрдбрддреЛрдм рдЬрд╛рд│реА рдХрд┐рдВрд╡рд╛ рддрд┐рд░рдкрд╛рд▓рдиреЗ рдЭрд╛рдХреВрди рдЯрд╛рдХрд╛ред",
                'tamil': "роХро▓рпНрооро┤рпИ роЖрокродрпНродрпБ! рокропро┐ро░рпНроХро│рпИ роЙроЯройрпЗ ро╡ро▓рпИ роЕро▓рпНро▓родрпБ родро╛ро░рпНрокрпНрокро╛ро▓ро┐ройро╛ро▓рпН роорпВроЯрпБроЩрпНроХро│рпНред",
                'telugu': "р░╡р░бр░Чр░│р▒Нр░│р▒Б р░кр░бр▒З р░кр▒Нр░░р░ор░╛р░жр░В! р░кр░Вр░Яр░▓р░ир▒Б р░╡р▒Жр░Вр░Яр░ир▒З р░╡р░▓р░▓р▒Б р░▓р▒Зр░жр░╛ р░др░╛р░░р▒Нр░кр░╛р░▓р░┐р░ир▒НтАМр░др▒Л р░Хр░кр▒Нр░кр░Вр░бр░┐ред",
                'bengali': "рж╢рж┐рж▓рж╛ржмрзГрж╖рзНржЯрж┐рж░ ржЭрзБржБржХрж┐! ржлрж╕рж▓ рждрзОржХрзНрж╖ржгрж╛рзО ржЬрж╛рж▓ ржмрж╛ рждрзЗрж░ржкрж▓ ржжрж┐ржпрж╝рзЗ ржврзЗржХрзЗ ржжрж┐ржиред",
                'kannada': "р▓Жр▓▓р▓┐р▓Хр▓▓р│Нр▓▓р│Б р▓Ер▓кр▓╛р▓п! р▓мр│Жр▓│р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓др▓Хр│Нр▓╖р▓г р▓мр▓▓р│Ж р▓Ер▓ер▓╡р▓╛ р▓др▓╛р▓░р│Нр▓кр▓╛р▓▓р▓┐р▓ир│НтАМр▓ир▓┐р▓Вр▓ж р▓ор│Бр▓Ър│Нр▓Ър▓┐ред"
            },
            'frost_risk': {
                'english': "Frost risk detected. Keep crops warm with smoke or heaters.",
                'hindi': "рдкрд╛рд▓рд╛ рдкрдбрд╝рдиреЗ рдХрд╛ рдбрд░ рд╣реИред рдлрд╕рд▓ рдХреЛ рдзреБрдЖрдВ рдпрд╛ рд╣реАрдЯрд░ рд╕реЗ рдЧрд░реНрдо рд░рдЦреЗрдВред",
                'punjabi': "рикри╛ри▓ри╛ рикрйИриг рижри╛ рибри░ ри╣рйИред рилри╕ри▓ риирйВрй░ ризрйВрй░риЖриВ риЬри╛риВ ри╣рйАриЯри░ риири╛ри▓ риЧри░рио ри░рй▒риЦрйЛред",
                'gujarati': "рк╣рк┐рко рккркбрк╡рк╛ркирлБркВ ркЬрлЛркЦрко ркЫрлЗ. рккрк╛ркХркирлЗ ркзрлБркорк╛ркбрк╛ ркЕркерк╡рк╛ рк╣рлАркЯрк░ркерлА ркЧрк░рко рк░рк╛ркЦрлЛред",
                'marathi': "рджрдВрд╡ рдкрдбрдгреНрдпрд╛рдЪрд╛ рдзреЛрдХрд╛ рдЖрд╣реЗ. рдкрд┐рдХрд╛рдВрдирд╛ рдзреВрд░ рдХрд┐рдВрд╡рд╛ рд╣реАрдЯрд░рдиреЗ рдЙрдмрджрд╛рд░ рдареЗрд╡рд╛ред",
                'tamil': "роЙро▒рпИрокройро┐ роЖрокродрпНродрпБ роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ. рокропро┐ро░рпНроХро│рпИ рокрпБроХрпИ роЕро▓рпНро▓родрпБ ро╣рпАроЯрпНроЯро░рпН роорпВро▓роорпН роЪрпВроЯро╛роХ ро╡рпИроХрпНроХро╡рпБроорпНред",
                'telugu': "р░ор░Вр░Ър▒Б р░кр▒Нр░░р░ор░╛р░жр░В р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐. р░кр░Вр░Яр░▓р░ир▒Б р░кр▒Кр░Ч р░▓р▒Зр░жр░╛ р░╣р▒Ар░Яр░░р▒НтАМр░др▒Л р░╡р▒Зр░бр░┐р░Чр░╛ р░Йр░Вр░Ър░Вр░бр░┐ред",
                'bengali': "рждрзБрж╖рж╛рж░ржкрж╛рждрзЗрж░ ржЭрзБржБржХрж┐ рж╢ржирж╛ржХрзНржд рж╣ржпрж╝рзЗржЫрзЗред ржзрзЛржБржпрж╝рж╛ ржмрж╛ рж╣рж┐ржЯрж╛рж░ ржжрж┐ржпрж╝рзЗ ржлрж╕рж▓ ржЧрж░ржо рж░рж╛ржЦрзБржиред",
                'kannada': "р▓╣р▓┐р▓о р▓Ер▓кр▓╛р▓п р▓кр▓др│Нр▓др│Жр▓пр▓╛р▓Чр▓┐р▓жр│Ж. р▓╣р│Кр▓Чр│Ж р▓Ер▓ер▓╡р▓╛ р▓╣р│Ар▓Яр▓░р│НтАМр▓ир▓┐р▓Вр▓ж р▓мр│Жр▓│р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓мр│Жр▓Ър│Нр▓Ър▓Чр▓╛р▓Чр▓┐р▓╕р▓┐ред"
            },
            'heat_wave': {
                'english': "Extreme heat detected. Use shade nets and increase irrigation.",
                'hindi': "рдмрд╣реБрдд рдЧрд░реНрдореА рд╣реИред рдлрд╕рд▓ рдХреЛ рдЫрд╛рдпрд╛ рдЬрд╛рд▓ рд▓рдЧрд╛рдПрдВ рдФрд░ рдЬреНрдпрд╛рджрд╛ рдкрд╛рдиреА рджреЗрдВред",
                'punjabi': "римри╣рйБрид риЧри░риорйА ри╣рйИред рилри╕ри▓ риирйВрй░ риЫри╛риВ рижрйЗ риЬри╛ри▓ ри▓риЧри╛риУ риЕридрйЗ риЬри╝ри┐риЖрижри╛ рикри╛ригрйА рижри┐риУред",
                'gujarati': "ркЕркдрк┐рк╢ркп ркЧрк░ркорлА ркЫрлЗ. рккрк╛ркХ рккрк░ ркЫрк╛ркпрк╛ркирлА ркЬрк╛рк│рлА рк▓ркЧрк╛рк╡рлЛ ркЕркирлЗ рк╡ркзрлБ рккрк╛ркгрлА ркЖрккрлЛред",
                'marathi': "рдЕрддрд┐рд╢рдп рдЙрд╖реНрдгрддрд╛ рдЖрд╣реЗ. рдкрд┐рдХрд╛рдВрд╡рд░ рд╕рд╛рд╡рд▓реАрдЪреЗ рдЬрд╛рд│реЗ рд▓рд╛рд╡рд╛ рдЖрдгрд┐ рдЬрд╛рд╕реНрдд рдкрд╛рдгреА рджреНрдпрд╛ред",
                'tamil': "роХроЯрпБроорпИропро╛рой ро╡рпЖрокрпНрокроорпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ. роиро┐ро┤ро▓рпН ро╡ро▓рпИроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ роирпАро░рпНрокрпНрокро╛роЪройродрпНродрпИ роЕродро┐роХро░ро┐роХрпНроХро╡рпБроорпНред",
                'telugu': "р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░╡р▒Зр░бр░┐р░ор░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐. р░ир▒Ар░б р░╡р░▓р░▓р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░┐ р░ир▒Ар░Яр░┐р░кр░╛р░░р▒Бр░жр░▓р░ир▒Б р░кр▒Жр░Вр░Ър░Вр░бр░┐ред",
                'bengali': "ржкрзНрж░ржЪржгрзНржб ржЧрж░ржо рж╢ржирж╛ржХрзНржд рж╣ржпрж╝рзЗржЫрзЗред ржЫрж╛ржпрж╝рж╛рж░ ржЬрж╛рж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржПржмржВ рж╕рзЗржЪ ржмрж╛ржбрж╝рж╛ржиред",
                'kannada': "р▓др│Ар▓╡р│Нр▓░ р▓╢р▓╛р▓Ц р▓кр▓др│Нр▓др│Жр▓пр▓╛р▓Чр▓┐р▓жр│Ж. р▓ир│Жр▓░р▓│р│Б р▓мр▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓мр▓│р▓╕р▓┐ р▓ор▓др│Нр▓др│Б р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐ р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓╕р▓┐ред"
            }
        }
    
    def analyze_weather_risks(self, weather_data):
        """Analyze weather data and identify crop risks"""
        risks = []
        
        if not weather_data:
            return risks
        
        # Current weather analysis
        if 'main' in weather_data:
            temp = weather_data['main']['temp']
            humidity = weather_data['main']['humidity']
            
            if temp <= self.risk_thresholds['temperature_low']:
                risks.append({
                    'type': 'frost_risk',
                    'severity': 'high',
                    'message': self.crop_actions['frost_risk']
                })
            
            if temp >= self.risk_thresholds['temperature_high']:
                risks.append({
                    'type': 'heat_wave',
                    'severity': 'high',
                    'message': self.crop_actions['heat_wave']
                })
        
        if 'wind' in weather_data:
            wind_speed = weather_data['wind']['speed']
            if wind_speed >= self.risk_thresholds['wind_speed']:
                risks.append({
                    'type': 'high_wind',
                    'severity': 'medium',
                    'message': self.crop_actions['high_wind']
                })
        
        if 'weather' in weather_data:
            weather_desc = weather_data['weather'][0]['description'].lower()
            for keyword in self.risk_thresholds['hail_keywords']:
                if keyword in weather_desc:
                    risks.append({
                        'type': 'hail_risk',
                        'severity': 'critical',
                        'message': self.crop_actions['hail_risk']
                    })
                    break
        
        return risks
    
    def analyze_forecast_risks(self, forecast_data):
        """Analyze forecast data for upcoming risks"""
        risks = []
        
        if not forecast_data or 'list' not in forecast_data:
            return risks
        
        for forecast in forecast_data['list'][:24]:  # Next 3 days
            dt = datetime.fromtimestamp(forecast['dt'])
            
            # Check for heavy rain
            if 'rain' in forecast and '3h' in forecast['rain']:
                rain_3h = forecast['rain']['3h']
                if rain_3h > self.risk_thresholds['heavy_rain']:
                    risks.append({
                        'type': 'heavy_rain',
                        'severity': 'high',
                        'time': dt.strftime('%Y-%m-%d %H:%M'),
                        'message': self.crop_actions['heavy_rain']
                    })
            
            # Check weather conditions
            weather_desc = forecast['weather'][0]['description'].lower()
            for keyword in self.risk_thresholds['hail_keywords']:
                if keyword in weather_desc:
                    risks.append({
                        'type': 'hail_risk',
                        'severity': 'critical',
                        'time': dt.strftime('%Y-%m-%d %H:%M'),
                        'message': self.crop_actions['hail_risk']
                    })
                    break
        
        return risks

def create_weather_chart(forecast_data):
    """Create weather forecast visualization"""
    if not forecast_data or 'list' not in forecast_data:
        return None
    
    dates = []
    temps = []
    humidity = []
    wind_speeds = []
    rain = []
    
    for forecast in forecast_data['list'][:24]:  # Next 3 days
        dt = datetime.fromtimestamp(forecast['dt'])
        dates.append(dt)
        temps.append(forecast['main']['temp'])
        humidity.append(forecast['main']['humidity'])
        wind_speeds.append(forecast['wind']['speed'] * 3.6)  # Convert to km/h
        
        rain_val = 0
        if 'rain' in forecast and '3h' in forecast['rain']:
            rain_val = forecast['rain']['3h']
        rain.append(rain_val)
    
    # Create subplots
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('Temperature (┬░C)', 'Humidity (%)', 'Wind Speed (km/h)', 'Rainfall (mm)'),
        specs=[[{"secondary_y": False}, {"secondary_y": False}],
               [{"secondary_y": False}, {"secondary_y": False}]]
    )
    
    # Temperature
    fig.add_trace(
        go.Scatter(x=dates, y=temps, mode='lines+markers', name='Temperature', line=dict(color='red')),
        row=1, col=1
    )
    
    # Humidity
    fig.add_trace(
        go.Scatter(x=dates, y=humidity, mode='lines+markers', name='Humidity', line=dict(color='blue')),
        row=1, col=2
    )
    
    # Wind Speed
    fig.add_trace(
        go.Scatter(x=dates, y=wind_speeds, mode='lines+markers', name='Wind Speed', line=dict(color='green')),
        row=2, col=1
    )
    
    # Rainfall
    fig.add_trace(
        go.Bar(x=dates, y=rain, name='Rainfall', marker_color='lightblue'),
        row=2, col=2
    )
    
    fig.update_layout(height=600, showlegend=False, title_text="3-Day Weather Forecast (Demo Data)")
    return fig

def main():
    st.set_page_config(
        page_title="Crop Weather Shield - Demo",
        page_icon="ЁЯМ╛",
        layout="wide"
    )

    # Initialize alert system
    alert_system = CropAlertSystem()

    # Sidebar for settings
    st.sidebar.header("Settings")
    city = st.sidebar.text_input("Enter your city:", value="Delhi")

    # Language selection with native names
    language_options = {lang_data['name']: lang_key for lang_key, lang_data in LANGUAGES.items()}
    selected_language_name = st.sidebar.selectbox(
        "Language / рднрд╛рд╖рд╛ / ринри╛ри╕ри╝ри╛ / ркнрк╛рк╖рк╛ / рднрд╛рд╖рд╛ / роорпКро┤ро┐ / р░нр░╛р░╖ / ржнрж╛рж╖рж╛ / р▓нр▓╛р▓╖р│Ж:",
        list(language_options.keys())
    )
    language = language_options[selected_language_name]

    # Dynamic title and subtitle based on selected language
    st.title(UI_TEXT['title'][language])
    st.markdown(UI_TEXT['subtitle'][language])

    st.info(UI_TEXT['demo_info'][language])
    
    # Main weather forecasting button
    if st.button(UI_TEXT['get_forecast_demo'][language], type="primary", use_container_width=True):
        with st.spinner("Generating demo weather data..."):
            time.sleep(1)  # Simulate API call delay
            
            # Generate demo data
            current_weather, forecast_data = generate_demo_weather_data()
            
            col1, col2 = st.columns([1, 1])
            
            with col1:
                st.subheader("ЁЯМбя╕П Current Weather (Demo)")
                temp = current_weather['main']['temp']
                feels_like = current_weather['main']['feels_like']
                humidity = current_weather['main']['humidity']
                wind_speed = current_weather['wind']['speed'] * 3.6  # Convert to km/h
                description = current_weather['weather'][0]['description'].title()
                
                st.metric("Temperature", f"{temp:.1f}┬░C", f"Feels like {feels_like:.1f}┬░C")
                st.metric("Humidity", f"{humidity}%")
                st.metric("Wind Speed", f"{wind_speed:.1f} km/h")
                st.info(f"Condition: {description}")
            
            with col2:
                st.subheader("тЪая╕П Crop Risk Analysis")
                
                # Analyze current risks
                current_risks = alert_system.analyze_weather_risks(current_weather)
                forecast_risks = alert_system.analyze_forecast_risks(forecast_data)
                
                all_risks = current_risks + forecast_risks
                
                if all_risks:
                    for risk in all_risks:
                        severity_color = {
                            'critical': 'ЁЯФ┤',
                            'high': 'ЁЯЯа',
                            'medium': 'ЁЯЯб'
                        }.get(risk['severity'], 'ЁЯЯв')
                        
                        message = risk['message'][language]
                        st.warning(f"{severity_color} **{risk['type'].replace('_', ' ').title()}**\n\n{message}")
                else:
                    st.success("тЬЕ No immediate crop risks detected!")
            
            # Weather forecast chart
            st.subheader("ЁЯУК 3-Day Weather Forecast")
            chart = create_weather_chart(forecast_data)
            if chart:
                st.plotly_chart(chart, use_container_width=True)
            
            # Detailed forecast table
            st.subheader("ЁЯУЕ Detailed Forecast")
            forecast_df = []
            for forecast in forecast_data['list'][:24]:
                dt = datetime.fromtimestamp(forecast['dt'])
                forecast_df.append({
                    'Date': dt.strftime('%Y-%m-%d'),
                    'Time': dt.strftime('%H:%M'),
                    'Temperature (┬░C)': round(forecast['main']['temp'], 1),
                    'Humidity (%)': forecast['main']['humidity'],
                    'Wind Speed (km/h)': round(forecast['wind']['speed'] * 3.6, 1),
                    'Condition': forecast['weather'][0]['description'].title()
                })
            
            df = pd.DataFrame(forecast_df)
            st.dataframe(df, use_container_width=True)

if __name__ == "__main__":
    main()
